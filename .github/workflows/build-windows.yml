name: Build Windows

on:
  workflow_call:
    secrets:
      TAURI_PRIVATE_KEY:
        required: false
      TAURI_KEY_PASSWORD:
        required: false
  workflow_dispatch:

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust with GNU toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable-x86_64-pc-windows-gnu
          target: x86_64-pc-windows-gnu
          cache: true
          cache-key-prefix: "windows-gnu-"
          
      - name: Install Windows GNU dependencies
        run: |
          # Install MinGW-w64
          choco install mingw -y
          refreshenv
          # Add MinGW to PATH
          echo "C:\tools\mingw64\bin" >> $GITHUB_PATH
          
      - name: Set environment variables for GNU build
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          echo "AR=ar" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
          
      - name: Install frontend dependencies
        run: npm install
        
      - name: Install Rust dependencies and configure
        run: |
          rustup target add x86_64-pc-windows-gnu
          rustup default stable-x86_64-pc-windows-gnu
          
      - name: Clean Cargo cache
        run: |
          cd src-tauri
          cargo clean
          
      - name: Build with Tauri (GNU toolchain)
        run: |
          npm run tauri build -- --target x86_64-pc-windows-gnu
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Force GNU linker usage
          CC: gcc
          CXX: g++
          AR: ar
          
      - name: Fallback MSVC build if GNU fails
        if: failure()
        run: |
          echo "GNU build failed, trying MSVC with rustls-tls..."
          # Switch back to MSVC toolchain
          rustup default stable-x86_64-pc-windows-msvc
          rustup target add x86_64-pc-windows-msvc
          
          # Clean and rebuild
          cd src-tauri
          cargo clean
          cd ..
          
          # Try build with MSVC
          npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
      - name: Alternative rustls build if both fail
        if: failure()
        run: |
          echo "Both builds failed, trying alternative dependencies..."
          # Modify Cargo.toml to use alternative TLS backend
          cd src-tauri
          
          # Replace ring-dependent dependencies
          sed -i 's/features = \["json", "rustls-tls"\]/features = ["json"]/' Cargo.toml
          sed -i '/reqwest.*rustls-tls/d' Cargo.toml
          echo 'reqwest = { version = "0.12", features = ["json"], default-features = false }' >> Cargo.toml
          
          cargo clean
          cd ..
          
          npm run tauri build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
      - name: Upload Windows artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: |
            src-tauri/target/*/release/bundle/msi/*.msi
            src-tauri/target/*/release/bundle/nsis/*.exe
          retention-days: 7
          
      - name: List build outputs (debug)
        if: always()
        run: |
          echo "=== Build outputs ==="
          Get-ChildItem -Recurse src-tauri/target -Name "*.exe" -ErrorAction SilentlyContinue | Select-Object -First 10
          Get-ChildItem -Recurse src-tauri/target -Name "*.msi" -ErrorAction SilentlyContinue | Select-Object -First 10
          echo "=== Bundle directory ==="
          Get-ChildItem -Recurse src-tauri/target -Name "bundle" -ErrorAction SilentlyContinue | ForEach-Object { Get-ChildItem $_.FullName -Recurse }